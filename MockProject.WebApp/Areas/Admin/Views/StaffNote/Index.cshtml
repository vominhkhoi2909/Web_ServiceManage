@{
    ViewData["Title"] = "Index";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}

<style>
    .white_box_tittle {
        justify-content: space-between;
    }

    @@media (max-width: 575.98px) {
        .white_box_tittle {
            flex-direction: column;
            justify-content: flex-start;
        }

        .rating-filter {
            width: 100%;
        }

        #rating-filter {
            width: 100% !important;
            margin-top: 15px;
        }

        .add_button {
            width: 100%;
            padding-right: 8px;
        }

            .add_button a {
                margin-top: 10px;
                width: 100% !important;
            }
    }


    .error-list {
        padding-left: 26px !important;
        margin-bottom: 8px !important;
    }

    .error-item {
        list-style-type: circle !important;
        padding: 2px 12px 2px 0px !important;
    }

        .error-item:first-child {
            padding-top: 8px;
        }

        .error-item:last-child {
            padding-bottom: 8px;
        }

    p {
        color: unset !important;
    }

    .text-muted {
        color: unset !important;
        font-size: 16px;
    }

    .card {
        position: relative;
        display: flex;
        flex-direction: column;
        min-width: 0;
        word-wrap: break-word;
        background-color: #fff;
        background-clip: border-box;
        border-radius: 0;
        min-height: 190px;
    }

    .card {
        margin-bottom: 12px;
        color: #000;
    }

    .card-body {
        flex: 1 1 auto;
        padding: 1.57rem;
    }

    .note-content {
        margin: 12px 0;
    }

    .note-has-grid .single-note-item .card {
        border-radius: 10px;
        border: 1px solid rgba(0,0,0,0.2) !important;
    }

    .note-has-grid .single-note-item .favourite-note {
        cursor: pointer
    }

    .note-has-grid .single-note-item .side-stick {
        position: absolute;
        width: 3px;
        height: 35px;
        left: 0;
        background-color: rgba(82, 95, 127, .5)
    }

    .note-has-grid .single-note-item .category-dropdown.dropdown-toggle:after {
        display: none
    }

    .note-has-grid .single-note-item .category [class*=category-] {
        height: 15px;
        width: 15px;
        display: none
    }

        .note-has-grid .single-note-item .category [class*=category-]::after {
            content: "\f0d7";
            font: normal normal normal 14px/1 FontAwesome;
            font-size: 12px;
            color: #fff;
            position: absolute
        }

    .note-has-grid .single-note-item .category .category-business {
        background-color: rgba(44, 208, 126, .5);
        border: 2px solid #2cd07e
    }

    .note-has-grid .single-note-item .category .category-social {
        background-color: rgba(44, 171, 227, .5);
        border: 2px solid #2cabe3
    }

    .note-has-grid .single-note-item .category .category-important {
        background-color: rgba(255, 80, 80, .5);
        border: 2px solid #ff5050
    }

    .note-has-grid .single-note-item.all-category .point {
        color: rgba(82, 95, 127, .5)
    }

    .note-has-grid .single-note-item.note-business .point {
        color: rgba(44, 208, 126, .5)
    }

    .note-has-grid .single-note-item.note-business .side-stick {
        background-color: rgba(44, 208, 126, .5)
    }

    .note-has-grid .single-note-item.note-business .category .category-business {
        display: inline-block
    }

    .note-has-grid .single-note-item.note-favourite .favourite-note {
        color: #ffc107
    }

    .note-has-grid .single-note-item.note-social .point {
        color: rgba(44, 171, 227, .5)
    }

    .note-has-grid .single-note-item.note-social .side-stick {
        background-color: rgba(44, 171, 227, .5)
    }

    .note-has-grid .single-note-item.note-social .category .category-social {
        display: inline-block
    }

    .note-has-grid .single-note-item.note-important .point {
        color: rgba(255, 80, 80, .5)
    }

    .note-has-grid .single-note-item.note-important .side-stick {
        background-color: rgba(255, 80, 80, .5)
    }

    .note-has-grid .single-note-item.note-important .category .category-important {
        display: inline-block
    }

    .note-has-grid .single-note-item.all-category .more-options,
    .note-has-grid .single-note-item.all-category.note-favourite .more-options {
        display: block
    }


    @@media (max-width:767.98px) {
        .note-has-grid .single-note-item {
            max-width: 100%
        }
    }
    .masonry-layout{
        column-count: 1;
        column-gap: 10px;
        column-fill: auto;
    }

    .item-masonry{
        width: 100%;
        break-inside: avoid;
    }
    .container, .container-fluid, .container-lg, .container-md, .container-sm, .container-xl, .container-xxl{
        padding-left: 0px!important;
        padding-right: 0px!important;
    }
       @@media (max-width:1024px) {
           .masonry-layout{
            column-count:  1;
        }
       }
            @@media (max-width:767.98px) {
          .masonry-layout{
            column-count:  1;
        }
    }



</style>
<div class="main_content_iner overly_inner">
    <div class="container-fluid p-0">
        <div class="row">
            <div class="col-12">
                <div class="page_title_box d-flex flex-wrap align-items-center justify-content-between">
                    <div class="page_title_left d-flex align-items-center">
                        <h3 class="f_s_25 f_w_700 dark_text mr_30">
                            Note Management
                        </h3>
                        <ol class="breadcrumb page_bradcam mb-0">
                            <li class="breadcrumb-item">
                                <a href="javascript:void(0);">Home</a>
                            </li>
                            <li class="breadcrumb-item active">Note management</li>
                        </ol>
                    </div>
                    <div class="page_title_right">
                        <div class="page_date_button d-flex align-items-center">
                           <img src="/assets/image/admin_base/icon/calender_icon.svg" alt="">
                                <span class="datetime"><!--render By JS--></span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12">
                <div class="white_card card_height_100 mb_30 pt-4">
                    <div class="white_card_body">
                        <div class="QA_section">
                            <div class="white_box_tittle list_header d-flex">
                                <h4>Note List</h4>
                                <div class="box_right d-flex flex-wrap align-items-center">
                                    <div class="serach_field_2 me-2">
                                        <div class="search_inner">
                                        </div>
                                    </div>

                                    <div class="rating-filter me-2" style=" display: flex;">
                                        <select class="form-control"
                                                style="height: 40px; width: 100px;margin-right: 8px;"
                                                id="own-filter">
                                            <option selected value="">All Note</option>
                                            <option value="1">My Note</option>
                                        </select>
                                        <select class="form-control"
                                                style="height: 40px; width: 150px;"
                                                id="type-filter">
                                            <option selected value="">All Note Type</option>
                                            <option value="1">Important</option>
                                            <option value="2">Infomation</option>
                                            <option value="3">Shared</option>
                                        </select>
                                    </div>
                                    <div class="add_button">
                                        <a id="btn-search"
                                           class="btn btn-primary"
                                           style="min-width: 100px">Sort</a>
                                        <a href="" class="btn btn-primary btn__add" style="
                                              min-width: 120px;
                                              background-color: #05d34e;
                                              border: none;" data-bs-toggle="modal" data-bs-target="#addModal" data-id="2">
                                            <i class="fas fa-plus"></i> Add new Note
                                        </a>
                                    </div>
                                </div>
                            </div>
                            <div class="mb_30">
                                <!--here-->
                                <div class="page-content container note-has-grid">
                                    <div class="tab-content bg-transparent">
                                        <div id="note-full-container" class="masonry-layout">
                                            @*note-important note-business note-social*@
                                            <!--JS here-->

                                        </div>
                                    </div>

                                </div>
                                <!--here-->
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@section Scripts{
    <!--Add Modal-->
    <div class="modal fade NoteModal"
     id="addModal"
     tabindex="-1"
     role="dialog"
     aria-labelledby="exampleModalCenterTitle"
     aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addModal">
                        Add Note
                    </h5>
                    <button type="button"
                        class="close"
                        data-bs-dismiss="modal"
                        aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <form id="addForm">
                    <div class="modal-body">
                        <div class="form-group">
                            <label for="title" class="col-form-label">Title</label>
                            <input type="text" class="form-control" name="title" required="">
                        </div>

                        <div class="form-group">
                            <label for="NoteType" class="col-form-label">Note Type</label>
                            <select class="form-control" name="type" required>
                                <option selected value="">Please choose one</option>
                                <option value="1">Important</option>
                                <option value="2">Infomation</option>
                                <option value="3">Shared</option>
                            </select>
                        </div>

                        <div class="form-group">
                            <label for="desc" class="col-form-label">Description</label>
                            <textarea class="form-control" required="" name="description" id="desc"></textarea>
                        </div>
                    </div>
                    <ul style="background-color: #FBD9CE; color: #A32B41; border-radius: 6px;" class="error-list">
                        <!--render by js-->
                    </ul>
                </form>
                <div class="modal-footer">
                    <button type="button"
                        class="btn btn-secondary"
                        data-bs-dismiss="modal">
                        Close
                    </button>
                    <button type="submit" class="btn btn-primary">Create</button>
                </div>

            </div>
        </div>
    </div>
    <!--Add Modal-->
    <!--Delete Modal-->
    <div class="modal fade NoteModal"
     id="deleteModal"
     tabindex="-1"
     role="dialog"
     aria-labelledby="exampleModalCenterTitle"
     aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteModal">
                        Delete this Note?
                    </h5>
                    <button type="button"
                        class="close"
                        data-bs-dismiss="modal"
                        aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you wanna delete this Note?</p>
                </div>
                <div class="modal-footer">
                    <button type="button"
                        class="btn btn-secondary"
                        data-bs-dismiss="modal">
                        Close
                    </button>
                    <button type="button" class="btn btn-primary">Delete</button>
                </div>
            </div>
        </div>
    </div>
    <!--Delete Modal-->
    <!--Edit Modal-->
    <div class="modal fade NoteModal"
     id="editModal"
     tabindex="-1"
     role="dialog"
     aria-labelledby="exampleModalCenterTitle"
     aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editModal">
                        Add Note
                    </h5>
                    <button type="button"
                        class="close"
                        data-bs-dismiss="modal"
                        aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <form id="editForm">
                    <div class="modal-body">
                        <div class="form-group">
                            <label for="title" class="col-form-label">Title</label>
                            <input type="text" class="form-control" name="title" required="">
                        </div>

                        <div class="form-group">
                            <label for="NoteType" class="col-form-label">Note Type</label>
                            <select class="form-control" name="type" required>
                                <option selected value="">Please choose one</option>
                                <option value="1">Important</option>
                                <option value="2">Infomation</option>
                                <option value="3">Shared</option>
                            </select>
                        </div>

                        <div class="form-group">
                            <label for="desc" class="col-form-label">Description</label>
                            <textarea class="form-control" required="" name="description" id="desc"></textarea>
                        </div>
                    </div>
                    <ul style="background-color: #FBD9CE; color: #A32B41; border-radius: 6px;" class="error-list">
                        <!--render by js-->
                    </ul>
                </form>

                <div class="modal-footer">
                    <button type="button"
                        class="btn btn-secondary"
                        data-bs-dismiss="modal">
                        Close
                    </button>
                    <button type="submit" class="btn btn-primary">Save Change</button>
                </div>

            </div>
        </div>
    </div>
    <!--Edit Modal-->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js"></script>
    <!--Moment JS-->

    <script>
        // Load Ready
        $(document).ready(function() {
            function renderNote(arr, userId) {
                console.log(arr)
                let html = ''
                if (arr == null) html = ''
                else
                    html = arr.map(element => {
                        let colorType = ''
                        let action = ''
                        if (element.type == 1) colorType = 'note-important'
                        if (element.type == 2) colorType = 'note-social'
                        if (element.createBy == userId) action = `
                                                                                    <span class="mr-1" style="cursor: pointer;"
                                                                                    data-id="${element.noteId}"
                                                                                    data-bs-toggle="modal"
                                                                                    data-bs-target="#editModal">
                                                                                        <i class="fa-solid fa-pen-to-square"></i>
                                                                                    </span>
                                                                                    <span class="mr-1"
                                                                                    style="margin-left: 8px; cursor: pointer;"
                                                                                    data-id="${element.noteId}"
                                                                                    data-bs-toggle="modal"
                                                                                    data-bs-target="#deleteModal">
                                                                                        <i class="fa-solid fa-trash-can"></i>
                                                                                    </span>`
                        return `
                        <div class="item-masonry single-note-item all-category ${colorType}" style="">
                            <div class="card card-body">
                                <span class="side-stick"></span>
                                <h5 class="note-title w-100 mb-0" style="font-size: 18px; font-weight: bold;"/>${element.createBy_Name || element.email} - ${element.title} <i class="point fa fa-circle ml-1 font-10"></i></h5>
                                <p class="note-date font-12 text-muted" style="opacity: 0.7;">${moment(element.createAt).fromNow()}</p>
                                <div class="note-content">
                                    <p class="note-inner-content text-muted" data-notecontent="${element.description}">${element.description}</p>
                                </div>
                                <div class="d-flex align-items-center">
                                    ${action}
                                    <div class="ml-auto">
                                    </div>
                                </div>
                            </div>
                        </div>
                        `
                    }).join('')
                $('#note-full-container').html(html)
            }
            //Load Datatable
            function getNote(type = '', userId = '') {
                getData(BASE_API + `api/note/all?type=${type}&userId=${userId}`)
                    .then(async res => {
                        var userLogin = await getDataWithToken(`${BASE_API}api/Admin/getinfo`, USERTOKEN)
                        if(userLogin.data.role_Name == 'Admin'){
                            $('.btn__add').hide()
                            $('#own-filter').hide()
                        }
                        renderNote(res.data, userLogin.data.userId)
                    })
            }
            getNote()
            // render error list by array
            function renderError(error) {
                let html = error.map(item => {
                    return `
                                                                                                                                                                            <li class="error-item">${item}</li>
                                                                                                                                                                        `
                }).join('')
                $('.error-list').html(html);
            }

            // Add
            $('#addModal').on('show.bs.modal', function(e) {
                $('#addModal .btn-primary').off()
                $('#addModal .btn-primary').click(async function(event) {
                    
                    // fetch apit post add Note
                    var userLogin = await getDataWithToken(`${BASE_API}api/Admin/getinfo`, USERTOKEN)
                    console.log(userLogin)
                    const data = new FormData(document.querySelector('#addForm'));
                    const formDataObject = Object.fromEntries(data.entries());
                    console.log(formDataObject)
                    if (formDataObject.description.trim() == '' ||
                        formDataObject.title.trim() == '' ||
                        formDataObject.type.trim() == '') {
                        notify('error', 'add Note fail')
                        renderError(Object.values(['All field is required']))
                        return;
                    }
                    // fetch apit post add Note
                    postData(`${BASE_API}api/Note/Add`, {
                        ...formDataObject,
                        createBy: userLogin.data.userId
                    })
                        .then(response => {
                            // case success: show totify and clear input text
                            if (response.success == true) {
                                postData('@Url.Action("CreateNoteNotification","StaffNote")', {
                                    ...formDataObject,
                                    createBy: userLogin.data.userId
                                }).then()
                                notify('success', 'add Note success')
                                getNote()
                                // clear form text
                                $('#addForm')[0].reset();
                                // clear err if have
                                $('#addModal').modal("hide");
                                $('.error-list').html('');
                            }
                            // case error by identity: show error
                            else if (!response.ok && response.errors != null) {
                                renderError(Object.values(response.errors))
                                notify('error', 'add Note fail')
                            }
                            // case error: show error
                            else {
                                renderError(Object.values([response.message]))
                                notify('error', 'add Note fail')
                            }
                        })
                })
            })

            // Edit
            $('#editModal').on('show.bs.modal', function(e) {
                var id = $(e.relatedTarget).data('id');
                getData(BASE_API + "api/Note/Detail/" + id).then(res => {
                    console.log(res);
                    $("#editModal textarea[name='description']").val(res.data.description)
                    $("#editModal input[name='title']").val(res.data.title)
                    $("#editModal select[name='type']").val(res.data.type)
                    if (res.success == false) {
                        notify("error", "There was an error!");
                    }
                })
                $('#editModal .btn-primary').off()
                $('#editModal .btn-primary').click(async function() {
                    var userLogin = await getDataWithToken(`${BASE_API}api/Admin/getinfo`, USERTOKEN)
                    // fetch apit post add Note
                    const data = new FormData(document.querySelector('#editForm'));
                    const formDataObject = Object.fromEntries(data.entries());
                    if (formDataObject.description.trim() == '' ||
                        formDataObject.title.trim() == '' ||
                        formDataObject.type.trim() == '') {
                        renderError(['All field is required'])
                        notify('error', 'update Note fail')
                        return
                    }
                    // fetch apit post add Note
                    putData(`${BASE_API}api/Note/Update/${id}`, {
                        ...formDataObject,
                        createBy: userLogin.data.userId
                    })
                        .then(response => {
                            // case success: show totify and clear input text
                            if (response.success == true) {
                                notify('success', 'update Note success')
                                getNote()
                                // clear form text
                                $('#editForm')[0].reset();
                                // clear err if have
                                $('#editModal').modal("hide");
                                $('.error-list').html('');
                            }
                            // case error by identity: show error
                            else if (!response.ok && response.errors != null) {
                                renderError(Object.values(response.errors))
                                notify('error', 'update Note fail')
                            }
                            // case error: show error
                            else {
                                renderError(Object.values([response.message]))
                                notify('error', 'update Note fail')
                            }
                        })
                })
            })

            // Delete
            $('#deleteModal').on('show.bs.modal', function(e) {
                var id = $(e.relatedTarget).data('id');
                $('#deleteModal .btn-primary').off()
                $('#deleteModal .btn-primary').click(function() {
                    deleteData(BASE_API + "api/Note/Delete/" + id).then(res => {
                        if (res.success == true) {
                            notify("success", "Deleted Note Successfully!");
                            $('#deleteModal').modal("hide");
                            getNote();
                        }
                        else {
                            notify("error", "There was an error!");
                        }
                    })
                })
            })

            // handle Hide modal
            $('.NoteModal').on('hidden.bs.modal', function(e) {
                $('.error-list').html('');
            })

            //Search Value
            $("#btn-search").on("click", async function() {
                let userId = ''
                if ($("#own-filter").val() == 1) {
                    var userLogin = await getDataWithToken(`${BASE_API}api/Admin/getinfo`, USERTOKEN)
                    userId = userLogin.data.userId
                }
                getNote($("#type-filter").val(), userId)
            })
        })
    </script>
}


